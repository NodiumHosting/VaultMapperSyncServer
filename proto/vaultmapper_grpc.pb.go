// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: VaultMapperProtocol/vaultmapper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMService_NewVaultCell_FullMethodName = "/VMService/NewVaultCell"
	VMService_Movement_FullMethodName     = "/VMService/Movement"
	VMService_VaultSync_FullMethodName    = "/VMService/VaultSync"
	VMService_PlayerLeave_FullMethodName  = "/VMService/PlayerLeave"
)

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// returns empty because we don't need any responses
type VMServiceClient interface {
	NewVaultCell(ctx context.Context, in *VaultCell, opts ...grpc.CallOption) (*Empty, error)
	Movement(ctx context.Context, in *VaultPlayer, opts ...grpc.CallOption) (*Empty, error)
	VaultSync(ctx context.Context, in *Vault, opts ...grpc.CallOption) (*Empty, error)
	PlayerLeave(ctx context.Context, in *PlayerUUID, opts ...grpc.CallOption) (*Empty, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) NewVaultCell(ctx context.Context, in *VaultCell, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, VMService_NewVaultCell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) Movement(ctx context.Context, in *VaultPlayer, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, VMService_Movement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) VaultSync(ctx context.Context, in *Vault, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, VMService_VaultSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) PlayerLeave(ctx context.Context, in *PlayerUUID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, VMService_PlayerLeave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServiceServer is the server API for VMService service.
// All implementations must embed UnimplementedVMServiceServer
// for forward compatibility.
//
// returns empty because we don't need any responses
type VMServiceServer interface {
	NewVaultCell(context.Context, *VaultCell) (*Empty, error)
	Movement(context.Context, *VaultPlayer) (*Empty, error)
	VaultSync(context.Context, *Vault) (*Empty, error)
	PlayerLeave(context.Context, *PlayerUUID) (*Empty, error)
	mustEmbedUnimplementedVMServiceServer()
}

// UnimplementedVMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMServiceServer struct{}

func (UnimplementedVMServiceServer) NewVaultCell(context.Context, *VaultCell) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewVaultCell not implemented")
}
func (UnimplementedVMServiceServer) Movement(context.Context, *VaultPlayer) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Movement not implemented")
}
func (UnimplementedVMServiceServer) VaultSync(context.Context, *Vault) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultSync not implemented")
}
func (UnimplementedVMServiceServer) PlayerLeave(context.Context, *PlayerUUID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayerLeave not implemented")
}
func (UnimplementedVMServiceServer) mustEmbedUnimplementedVMServiceServer() {}
func (UnimplementedVMServiceServer) testEmbeddedByValue()                   {}

// UnsafeVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServiceServer will
// result in compilation errors.
type UnsafeVMServiceServer interface {
	mustEmbedUnimplementedVMServiceServer()
}

func RegisterVMServiceServer(s grpc.ServiceRegistrar, srv VMServiceServer) {
	// If the following call pancis, it indicates UnimplementedVMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMService_ServiceDesc, srv)
}

func _VMService_NewVaultCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultCell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).NewVaultCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_NewVaultCell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).NewVaultCell(ctx, req.(*VaultCell))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_Movement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultPlayer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).Movement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_Movement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).Movement(ctx, req.(*VaultPlayer))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_VaultSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).VaultSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_VaultSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).VaultSync(ctx, req.(*Vault))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_PlayerLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerUUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).PlayerLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_PlayerLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).PlayerLeave(ctx, req.(*PlayerUUID))
	}
	return interceptor(ctx, in, info, handler)
}

// VMService_ServiceDesc is the grpc.ServiceDesc for VMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewVaultCell",
			Handler:    _VMService_NewVaultCell_Handler,
		},
		{
			MethodName: "Movement",
			Handler:    _VMService_Movement_Handler,
		},
		{
			MethodName: "VaultSync",
			Handler:    _VMService_VaultSync_Handler,
		},
		{
			MethodName: "PlayerLeave",
			Handler:    _VMService_PlayerLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "VaultMapperProtocol/vaultmapper.proto",
}
